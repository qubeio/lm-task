# Claude Task Master - Product Requirements Document

<PRD>
# Technical Architecture  

## System Components
1. **Task Management Core**
   - Tasks.json file structure (single source of truth)
   - Task model with dependencies, priorities, and metadata
   - Task state management system
   - Task file generation subsystem

2. **AI Integration Layer**
   - Azure OpenAI API integration (exclusive provider)
   - Prompt engineering components
   - Response parsing and processing
   - Unified AI service layer with telemetry

3. **Command Line Interface**
   - Command parsing and execution
   - Interactive user input handling
   - Display and formatting utilities
   - Status reporting and feedback system

4. **MCP Server Integration**
   - Model Context Protocol server implementation
   - Tool registration and execution
   - Cursor AI integration support
   - Structured data exchange

## Data Models

### Task Model
```json
{
  "id": 1,
  "title": "Task Title",
  "description": "Brief task description",
  "status": "pending|done|deferred|in-progress|review|cancelled",
  "dependencies": [0],
  "priority": "high|medium|low",
  "details": "Detailed implementation instructions",
  "testStrategy": "Verification approach details",
  "subtasks": [
    {
      "id": 1,
      "title": "Subtask Title",
      "description": "Subtask description",
      "status": "pending|done|deferred|in-progress|review|cancelled",
      "dependencies": [],
      "details": "Implementation details with timestamped updates"
    }
  ]
}
```

### Tasks Collection Model
```json
{
  "meta": {
    "projectName": "Project Name",
    "version": "1.0.0",
    "prdSource": "path/to/prd.txt",
    "createdAt": "ISO-8601 timestamp",
    "updatedAt": "ISO-8601 timestamp"
  },
  "tasks": [
    // Array of Task objects
  ]
}
```

### Task File Format
```
# Task ID: <id>
# Title: <title>
# Status: <status>
# Dependencies: <comma-separated list of dependency IDs>
# Priority: <priority>
# Description: <brief description>
# Details:
<detailed implementation notes>

# Test Strategy:
<verification approach>

# Subtasks:
1. <subtask title> - <subtask description>
```

## APIs and Integrations
1. **Azure OpenAI API (Exclusive Provider)**
   - Authentication via API key and endpoint
   - Support for GPT-4o, GPT-4o-mini, and o3-mini models
   - Direct API calls with structured response handling
   - Error handling and retries
   - Cost tracking and telemetry

2. **File System API**
   - Reading/writing tasks.json
   - Managing individual task files
   - Command execution logging
   - Debug logging system

3. **MCP Protocol Integration**
   - Tool registration and discovery
   - Structured data exchange
   - Session management
   - Error handling and validation

## Infrastructure Requirements
1. **Node.js Runtime**
   - Version 14.0.0 or higher
   - ES Module support
   - File system access rights
   - Command execution capabilities

2. **Configuration Management**
   - .taskmasterconfig file for model settings
   - Environment variable handling for API keys
   - Azure OpenAI endpoint configuration
   - Sensible defaults with overrides

3. **Development Environment**
   - Git repository
   - NPM package management
   - Cursor editor integration with MCP
   - Command-line terminal access

# Development Roadmap  

## Phase 1: Core Task Management System ✅
1. **Task Data Structure** ✅
   - Implemented tasks.json structure
   - Created task model validation
   - Implemented basic task operations (create, read, update)
   - Developed file system interactions

2. **Command Line Interface Foundation** ✅
   - Implemented command parsing with Commander.js
   - Created help documentation
   - Implemented colorized console output
   - Added logging system with configurable levels

3. **Basic Task Operations** ✅
   - Implemented task listing functionality
   - Created task status update capability
   - Added dependency tracking
   - Implemented priority management

4. **Task File Generation** ✅
   - Created task file templates
   - Implemented generation from tasks.json
   - Added bi-directional synchronization
   - Implemented proper file naming and organization

## Phase 2: AI Integration ✅
1. **Azure OpenAI Integration** ✅
   - Implemented API authentication
   - Created prompt templates for PRD parsing
   - Designed response handlers
   - Added error management and retries

2. **PRD Parsing System** ✅
   - Implemented PRD file reading
   - Created PRD to task conversion logic
   - Added intelligent dependency inference
   - Implemented priority assignment logic

3. **Task Management With AI** ✅
   - Create AI-powered task addition
   - Implement task updating based on new context
   - Add context-aware task modification capabilities
   - Implement parent-child relationship management

4. **Implementation Drift Handling** ✅
   - Added capability to update future tasks
   - Implemented task rewriting based on new context
   - Created dependency chain updates
   - Preserve completed work while updating future tasks

## Phase 3: MCP Integration ✅
1. **MCP Server Implementation** ✅
   - Implemented Model Context Protocol server
   - Created tool registration system
   - Added structured data exchange
   - Implemented session management

2. **Tool Registration** ✅
   - Registered all core task management tools
   - Implemented parameter validation
   - Added error handling and responses
   - Created comprehensive tool documentation

3. **Cursor Integration** ✅
   - Created MCP configuration for Cursor
   - Implemented agent workflow guidelines
   - Added context management for agents
   - Created example interactions

4. **Project Initialization** ✅
   - Created project templating system
   - Implemented interactive setup
   - Added environment configuration
   - Created documentation generation

## Phase 4: Advanced Features ✅
1. **Batch Operations** ✅
   - Implemented multi-task status updates
   - Added task filtering and querying
   - Created advanced dependency management
   - Implemented task reorganization (move operations)

2. **Dependency Management** ✅
   - Implemented dependency validation
   - Added circular dependency detection
   - Created automatic dependency fixing
   - Implemented dependency visualization

3. **Configuration System** ✅
   - Created unified configuration management
   - Implemented model selection system
   - Added parameter configuration
   - Created API key management

4. **User Documentation** ✅
   - Created detailed README
   - Added comprehensive command reference
   - Implemented example workflows
   - Created troubleshooting guides

# Logical Dependency Chain

## Foundation Layer ✅
1. **Task Data Structure** - Core data model implementation
2. **Command Line Interface** - Primary user interaction mechanism
3. **Basic Task Operations** - Fundamental task management operations

## Functional Layer ✅
4. **Task File Generation** - Individual task file creation and management
5. **Azure OpenAI Integration** - AI capabilities for enhanced task generation
6. **PRD Parsing System** - Initial task generation from requirements

## Enhancement Layer ✅
7. **AI-Powered Task Management** - Enhanced task creation and modification
8. **Implementation Drift Handling** - Maintaining task relevance during development
9. **MCP Server Integration** - Protocol-based tool integration

## Advanced Layer ✅
10. **Batch Operations** - Efficiency improvements for multiple tasks
11. **Dependency Management** - Advanced relationship handling
12. **Configuration System** - Unified settings management
13. **User Documentation** - Complete user guidance

# Risks and Mitigations  

## Technical Challenges

### API Reliability
**Risk**: Azure OpenAI API could have downtime, rate limiting, or breaking changes.
**Mitigation**: 
- Implemented robust error handling with exponential backoff
- Added fallback model configuration
- Cache important responses to reduce API dependency
- Support offline mode for critical functions

### Model Output Variability
**Risk**: AI models may produce inconsistent or unexpected outputs.
**Mitigation**:
- Designed robust prompt templates with strict output formatting requirements
- Implemented response validation and error detection
- Added self-correction mechanisms and retries with improved prompts
- Allow manual editing of generated content

### Azure OpenAI Dependency
**Risk**: Single provider dependency could limit flexibility.
**Mitigation**:
- Designed modular AI service layer for future provider additions
- Implemented comprehensive error handling for Azure-specific issues
- Created fallback mechanisms within Azure model selection
- Documented migration path for future provider support

## MVP Definition

### Feature Prioritization
**Risk**: Including too many features in the MVP could delay release and adoption.
**Mitigation**:
- Focused MVP on core task management + Azure OpenAI integration
- Removed complex features like task expansion and complexity analysis
- Implemented feature flags for easy enabling/disabling of features
- Got early user feedback to validate feature importance

### Scope Management
**Risk**: The project could expand beyond its original intent, becoming too complex.
**Mitigation**:
- Maintained strict definition of core task management functionality
- Removed expansion and complexity analysis features to simplify
- Focus on task management for AI-driven development
- Evaluate new features against core value proposition

### User Expectations
**Risk**: Users might expect features that have been removed.
**Mitigation**:
- Clearly communicate the tool's current capabilities and limitations
- Provide integration points with existing project management tools
- Focus on the unique value of AI-driven task management
- Document specific use cases and example workflows

## Resource Constraints

### Development Capacity
**Risk**: Limited development resources could delay implementation.
**Mitigation**:
- Phased implementation to deliver value incrementally
- Focused on core functionality first
- Leveraged open source libraries where possible
- Designed for extensibility to allow community contributions

### AI Cost Management
**Risk**: Excessive API usage could lead to high costs.
**Mitigation**:
- Implemented token usage tracking and reporting
- Added configurable limits to prevent unexpected costs
- Optimized prompts for token efficiency
- Created telemetry system for cost monitoring

### Documentation Overhead
**Risk**: Complexity of the system requires extensive documentation that is time-consuming to maintain.
**Mitigation**:
- Used AI to help generate and maintain documentation
- Created self-documenting commands and features
- Implemented progressive documentation (basic to advanced)
- Built help directly into the CLI and MCP tools

# Appendix  

## AI Prompt Engineering Specifications

### PRD Parsing Prompt Structure
```
You are assisting with transforming a Product Requirements Document (PRD) into a structured set of development tasks.

Given the following PRD, create a comprehensive list of development tasks that would be needed to implement the described product.

For each task:
1. Assign a short, descriptive title
2. Write a concise description
3. Identify dependencies (which tasks must be completed before this one)
4. Assign a priority (high, medium, low)
5. Include detailed implementation notes
6. Describe a test strategy to verify completion

Structure the tasks in a logical order of implementation.

PRD:
{prd_content}
```

### Task Update Prompt Structure
```
You are helping to update development tasks based on new context or changes.

Current task:
Title: {task_title}
Description: {task_description}
Details: {task_details}

New context or changes:
{update_context}

Please update the task to incorporate this new information while preserving existing relevant details.
```

### Task Addition Prompt Structure
```
You are helping to create a new development task based on a description.

Task description: {task_description}

Please create a structured task with:
1. A clear, actionable title
2. A concise description
3. Detailed implementation notes
4. A test strategy to verify completion
5. Appropriate priority level

Additional context:
{additional_context}
```

## Task File System Specification

### Directory Structure
```
/
├── .cursor/
│   └── mcp.json
├── scripts/
│   ├── prd.txt
│   └── README.md
├── tasks/
│   ├── task_001.txt
│   ├── task_002.txt
│   ├── tasks.json
│   └── ...
├── .env
├── .env.example
├── .gitignore
├── .taskmasterconfig
├── package.json
└── README.md
```

### Task ID Specification
- Main tasks: Sequential integers (1, 2, 3, ...)
- Subtasks: Parent ID + dot + sequential integer (1.1, 1.2, 2.1, ...)
- ID references: Used in dependencies, command parameters
- ID ordering: Implies suggested implementation order

## Command-Line Interface Specification

### Global Options
- `--help`: Display help information
- `--version`: Display version information
- `--file=<file>`: Specify an alternative tasks.json file
- `--quiet`: Reduce output verbosity
- `--debug`: Increase output verbosity
- `--json`: Output in JSON format (for programmatic use)

### Command Structure
- `task-master <command> [options]`
- All commands operate on tasks.json by default
- Commands follow consistent parameter naming
- Common parameter styles: `--id=<id>`, `--status=<status>`, `--prompt="<text>"`
- Boolean flags: `--all`, `--force`, `--with-subtasks`

## API Integration Specifications

### Azure OpenAI Configuration
- Authentication: AZURE_OPENAI_API_KEY environment variable
- Endpoint: AZURE_OPENAI_ENDPOINT environment variable
- Model selection: Configured in .taskmasterconfig file
- Available models: gpt-4o, gpt-4o-mini, o3-mini
- Maximum tokens: Configurable per model role
- Temperature: Configurable per model role

### Configuration Management
- Primary config: .taskmasterconfig file in project root
- API keys: Environment variables or .env file
- Model settings: main, fallback roles with separate configurations
- Global settings: logging, debug, project metadata
- Azure-specific: endpoint URL configuration

## MCP Tool Reference

### Available Tools
- **Project Setup**: initialize_project, parse_prd
- **Task Viewing**: get_tasks, get_task, next_task
- **Task Management**: add_task, update_task, update_subtask, set_task_status
- **Task Structure**: add_subtask, remove_task, clear_subtasks, move_task
- **Dependencies**: add_dependency, remove_dependency, validate_dependencies, fix_dependencies
- **File Generation**: generate
- **Configuration**: models

### Tool Categories
1. **Core Operations**: Basic task CRUD operations
2. **AI-Enhanced**: Operations that use Azure OpenAI for intelligent processing
3. **Dependency Management**: Tools for managing task relationships
4. **File Operations**: Tools for generating and managing task files
5. **Configuration**: Tools for system configuration and model management

### Integration Points
- Cursor editor integration via MCP protocol
- CLI fallback for all MCP tools
- Structured data exchange for programmatic access
- Session management for stateful operations
</PRD>
