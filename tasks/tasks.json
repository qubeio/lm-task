{
  "tasks": [
    {
      "id": 105,
      "title": "Implement Insert Task Functionality with Order Field",
      "description": "Develop functionality to allow insertion of tasks at specific positions using an optional 'order' field without renumbering existing task IDs.",
      "details": "Enhance the task management system by extending the task schema with an optional 'order' field for display positioning. Develop the following functions:\n- insert-task: Shifts existing tasks' order values to insert a new task at a specific position.\n- insert-between: Determines a fractional position between tasks to facilitate insertion without disrupting order continuity.\n- reorder-task: Allows existing tasks to be moved to new positions by updating their order values.\n- migrate-order: Automatically migrate the system from relying on ID-based sorting to order-based sorting while maintaining backward compatibility.\n\nIntegrate these functionalities with CLI commands (insert-task, insert-between, reorder-task, migrate-order) and create corresponding MCP tools. Adhere to the 5-phase approach from the planning document, starting with core infrastructure, then inserting, reordering, integrating with MCP, and final polish. Incorporate comprehensive error handling to manage invalid inputs and ensure smooth operation alongside legacy functionality.",
      "testStrategy": "1. Unit Test each function: Verify that insert-task correctly shifts order values and places the new task at the specified position; test insert-between for correct fractional positioning; test reorder-task to ensure tasks can be moved successfully; and validate migrate-order for accurate conversion from ID-based to order-based sorting. \n2. CLI Integration Tests: Execute each new CLI command to ensure they trigger the expected functionality and handle errors gracefully. \n3. Regression Testing: Run existing task operations to confirm backward compatibility is maintained. \n4. Edge Cases: Test boundary conditions such as inserting at the beginning, middle, or end of the task list, and ensure error messages for invalid order inputs are descriptive and helpful.",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "Phase 1: Core Infrastructure - Add Order Field Schema",
          "description": "Implement the foundational infrastructure for the order field approach by updating the task schema and adding migration utilities.",
          "details": "Add optional 'order: z.number()' field to the task schema in the appropriate location (likely in add-task.js or a new schemas file). Update validation to ensure order values are numeric. Implement default order assignment logic where new tasks get order = id if no explicit order provided. Create migration detection logic to identify tasks without order field.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 2,
          "title": "Phase 1: Implement Migration Utilities",
          "description": "Create migration utilities to transition existing tasks to use the order field while maintaining backward compatibility.",
          "details": "Create scripts/modules/task-manager/migrate-order.js with functions to: 1) Detect if migration is needed (check if tasks have order field), 2) Auto-migrate by assigning order = id for tasks without order field, 3) Provide explicit migration command for controlled updates, 4) Ensure sorted order after migration. Include comprehensive error handling and logging.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 3,
          "title": "Phase 1: Update Display Logic for Order-Based Sorting",
          "description": "Update all list and display functions to sort tasks by order field instead of ID, with fallback to ID for backward compatibility.",
          "details": "Create scripts/modules/task-manager/order-utils.js with sortTasksByOrder() function that sorts by order field (fallback to ID). Update list-tasks.js, find-next-task.js, and generate-task-files.js to use order-based sorting. Ensure all display logic respects the new ordering while maintaining compatibility with tasks that don't have order field.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 4,
          "title": "Phase 2: Implement Insert Task Core Function",
          "description": "Create the core insert-task functionality that can insert tasks at specific positions by shifting order values.",
          "details": "Create scripts/modules/task-manager/insert-task.js with insertTask() function. Logic: 1) Read existing tasks, 2) Auto-migrate to order field if needed, 3) Generate new task using existing AI logic from add-task.js, 4) Shift order values for existing tasks (>= insertPosition) by +1, 5) Assign new task order = insertPosition, 6) Sort tasks by order field, 7) Write updated tasks and regenerate files. Include comprehensive validation and error handling.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 5,
          "title": "Phase 2: Implement Insert Between Function",
          "description": "Create the insert-between functionality for fractional positioning between existing tasks.",
          "details": "Create scripts/modules/task-manager/insert-between.js with insertTaskBetween() function. Logic: 1) Find task at afterPosition and next task, 2) Calculate fractional order: (afterOrder + nextOrder) / 2, 3) Insert new task with fractional order, 4) No other tasks need updating. Handle edge cases like inserting after the last task. Use the same AI task generation logic as insert-task.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 6,
          "title": "Phase 2: Add CLI Commands for Insert Operations",
          "description": "Add CLI commands for insert-task and insert-between operations to the commands.js file.",
          "details": "Add to scripts/modules/commands.js: 1) 'insert-task' command with position argument and same options as add-task (--prompt, --title, --description, --details, --dependencies, --priority), 2) 'insert-between' command with after-position argument and same options. Include proper argument validation, error handling, and user feedback. Follow the same patterns as existing commands.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 7,
          "title": "Phase 3: Implement Reorder Task Functionality",
          "description": "Create functionality to reorder existing tasks to new positions without creating new tasks.",
          "details": "Create scripts/modules/task-manager/reorder-task.js with reorderTask() function. Logic: 1) Find task by ID, 2) Remove from current position, 3) Shift tasks to make space at new position, 4) Update task's order field, 5) Sort and save. Add CLI command 'reorder-task' with task-id and --to-position options. Include validation that task exists and position is valid.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 8,
          "title": "Phase 4: Create MCP Direct Function Wrappers",
          "description": "Create MCP direct function wrappers for all new functionality following the established pattern.",
          "details": "Create in mcp-server/src/core/direct-functions/: 1) insert-task.js - wrapper for insertTask(), 2) insert-between.js - wrapper for insertTaskBetween(), 3) reorder-task.js - wrapper for reorderTask(), 4) migrate-order.js - wrapper for migrateTasksToOrderField(). Follow the same pattern as existing direct functions (add-task.js, move-task.js) with proper error handling and silent mode.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 9,
          "title": "Phase 4: Implement MCP Tools",
          "description": "Create MCP tools that expose the new functionality to MCP clients like Cursor.",
          "details": "Create in mcp-server/src/tools/: 1) insert-task.js - MCP tool for insert_task, 2) insert-between.js - MCP tool for insert_task_between, 3) reorder-task.js - MCP tool for reorder_task, 4) migrate-order.js - MCP tool for migrate_order. Follow the same pattern as existing tools with proper Zod schemas, parameter validation, and tool registration. Update tool registration in the MCP server.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 10,
          "title": "Phase 5: Create Comprehensive Tests",
          "description": "Create comprehensive unit and integration tests for all new functionality.",
          "details": "Create test files in tests/ directory: 1) Unit tests for order field migration logic, insert position calculations, fractional ordering edge cases, dependency preservation during reordering, 2) Integration tests for full insert workflow (CLI + file operations), MCP tool functionality, cross-command interactions, file generation after ordering changes, 3) Edge case tests for empty task lists, single task lists, tasks with no order field (mixed state), very large order values, fractional precision limits.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        },
        {
          "id": 11,
          "title": "Phase 5: Update Documentation and Add Examples",
          "description": "Update user documentation to include the new insert task functionality with examples and workflows.",
          "details": "Update documentation files: 1) Add insert task commands to README.md and command reference, 2) Update rules/lmtasker.mdc with new MCP tools and CLI commands, 3) Add examples showing insert-task, insert-between, and reorder-task usage, 4) Document the migration process and backward compatibility guarantees, 5) Add workflow examples showing when to use each type of insertion, 6) Update help text in CLI commands.",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 105
        }
      ]
    },
    {
      "id": 106,
      "title": "Switch TUI to Direct Task JSON Querying",
      "description": "Refactor the TUI so that it reads and parses tasks directly from tasks.json, instead of relying on CLI command output. This ensures all fields (such as 'details') are available to the UI and improves reliability. Update all relevant screens and data-fetching logic to use direct file access. Add robust error handling and update documentation/tests as needed.",
      "details": "",
      "testStrategy": "",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "Refactor TUI data loader to use tasks.json",
          "description": "Replace CLI-based task fetching in the TUI with direct reading/parsing of tasks.json. Ensure all task fields are loaded, including 'details'.",
          "status": "done",
          "dependencies": []
        },
        {
          "id": 2,
          "title": "Update all TUI screens to use new loader",
          "description": "Update all relevant TUI screens/components to consume task data from the new direct JSON loader, removing any reliance on CLI output.",
          "status": "done",
          "dependencies": []
        },
        {
          "id": 3,
          "title": "Add error handling and fallback",
          "description": "Implement robust error handling for file access and JSON parsing in the new loader. Provide user-friendly error messages and fallback states in the UI.",
          "status": "done",
          "dependencies": []
        },
        {
          "id": 4,
          "title": "Update documentation and tests",
          "description": "Update project documentation to describe the new data loading approach. Add or update unit tests for the loader and regression tests for TUI functionality.",
          "status": "done",
          "dependencies": []
        }
      ]
    },
    {
      "id": 107,
      "title": "Add Repository Title to TUI Window Titles",
      "description": "Add the repository title to the window titles in both task details and task list views in the TUI",
      "details": "Implement functionality to display the repository title in the window title bars of both the task details screen and the task list screen in the TUI. This will help users identify which repository they are working with, especially when multiple TaskMaster instances are open.",
      "testStrategy": "",
      "status": "done",
      "dependencies": [],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 108,
      "title": "Prepare package.json for NPM publication",
      "description": "Ensure package.json has all required fields for publishing (name, version, etc.) and configure .npmignore or the 'files' property.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 109,
      "title": "User Account and Registry Setup",
      "description": "Manual steps for the user to set up their NPM account and registry configuration.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "Create NPM Account",
          "description": "Go to https://www.npmjs.com/signup to create a new NPM account if you don't already have one. This is a manual step for the user.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 109
        },
        {
          "id": 2,
          "title": "Verify Email Address",
          "description": "After creating your NPM account, check your email and verify your email address. This is often a required step before you can publish packages. This is a manual step for the user.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 109
        },
        {
          "id": 3,
          "title": "Log in to NPM via CLI",
          "description": "Open your terminal and run the command 'npm login'. Follow the prompts to authenticate with your NPM account. This is a manual step for the user.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 109
        },
        {
          "id": 4,
          "title": "Clarify 'Stretra' Registry and Configure (if applicable)",
          "description": "Please clarify if 'Stretra' is a private NPM registry you intend to use. If so, you may need to configure it using 'npm config set registry <your_stretra_registry_url>'. If you meant the public NPM registry, this sub-task can be considered complete after confirmation. This is a manual step for the user.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 109
        }
      ]
    },
    {
      "id": 110,
      "title": "Code Preparation and Versioning",
      "description": "Final checks on the codebase and version bumping before publication.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 111,
      "title": "Perform NPM Publish Dry Run",
      "description": "Simulate the publishing process to verify package contents without deploying.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 112,
      "title": "Verify NPM Publication",
      "description": "Confirm the package is live and correct on the registry website.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 113,
      "title": "Update Documentation to Reflect Reduced AI Features",
      "description": "Update all documentation files in the docs/ folder to accurately reflect the simplified architecture with AI limited to PRD parsing only, removing references to deprecated AI-powered features and updating examples accordingly.",
      "details": "Based on the PRD.md changes, the documentation needs to be updated to reflect the new simplified architecture where:\n\n1. AI functionality is limited to PRD parsing only\n2. All task operations (add, update, modify) are manual via CLI/MCP\n3. Package has been rebranded from task-master-ai to lm-tasker\n4. Configuration uses .lmtaskerconfig instead of .lmtaskerconfig\n5. Binary commands changed from task-master to lm-tasker\n\nKey files to update:\n- docs/command-reference.md: Remove AI-powered task creation/update references, update command names\n- docs/configuration.md: Update config file names and focus on PRD parsing model configuration\n- docs/examples.md: Update examples to reflect manual task management workflow\n- docs/tutorial.md: Update tutorial to emphasize manual task operations\n- docs/models.md: Clarify that models are only used for PRD parsing\n- docs/task-structure.md: Update to reflect manual task management approach\n\nThe documentation should clearly communicate that:\n- Task creation, updates, and modifications are manual operations\n- AI is only used for initial PRD-to-tasks conversion\n- This provides predictable behavior and lower costs\n- The system focuses on structured task management rather than AI automation",
      "testStrategy": "Review all updated documentation files to ensure:\n1. No references to deprecated AI-powered task operations remain\n2. All command examples use lm-tasker instead of task-master\n3. Configuration examples reference .lmtaskerconfig\n4. Examples and workflows reflect manual task management\n5. AI usage is clearly scoped to PRD parsing only\n6. Documentation is consistent with the PRD.md architecture",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 114,
      "title": "Implement Vim-Style Left and Right Navigation in TUI",
      "description": "Add vim-style h/l key bindings for left and right navigation in the TaskMaster TUI interface, providing an intuitive navigation experience for vim users.",
      "details": "Implement vim-style navigation keys in the TUI:\n- 'h' key for left navigation (go back/previous screen)\n- 'l' key for right navigation (go forward/enter details)\n- Update key handlers in the TUI components to support these bindings\n- Ensure the new bindings work alongside existing navigation methods\n- Test in both task list and task detail screens\n- Update any help text or documentation to reflect the new key bindings\n\nTechnical implementation:\n- Update keyHandlers.js to include h/l key mappings\n- Modify TaskListScreen.js and TaskDetailScreen.js to handle the new keys\n- Ensure proper integration with existing navigation logic\n- Add appropriate visual feedback for the navigation actions",
      "testStrategy": "Manual testing of vim-style navigation:\n1. Launch TUI and verify 'h' key navigates back/left\n2. Verify 'l' key navigates forward/right or enters details\n3. Test in both task list and detail screens\n4. Confirm existing navigation methods still work\n5. Verify help text shows new key bindings if applicable",
      "status": "done",
      "dependencies": [],
      "priority": "medium",
      "subtasks": [
        {
          "id": 1,
          "title": "Analyze current navigation architecture and plan vim-style implementation",
          "description": "Document the current navigation system and create a detailed implementation plan for adding h/l key bindings",
          "details": "## Current Navigation Architecture Analysis\n\n### Key Components:\n1. **KeyHandlers.js**: Centralized keyboard event handling for global keys\n2. **TaskListScreen.js**: Main task list view \n3. **TaskDetailScreen.js**: Task detail view with local key handlers\n4. **App.js**: Main application with screen management (showTaskList, showTaskDetail)\n\n### Current Navigation Flow:\n- **Task List → Task Detail**: Enter key (handled in KeyHandlers.js)\n- **Task Detail → Task List**: Escape/q keys (handled in TaskDetailScreen.js)\n\n### Implementation Plan for Vim-Style h/l Navigation:\n\n#### 1. In KeyHandlers.js (Global Navigation):\n- Add 'l' key binding: Navigate forward/enter details (same as Enter)\n- Add 'h' key binding: Navigate back (context-sensitive)\n  - In task list: Do nothing (already at top level)\n  - In task detail: Return to task list\n\n#### 2. In TaskDetailScreen.js (Local Navigation):\n- Add 'h' key binding to all component key handlers (container, subtaskList, parentTaskBox, subtaskDetailBox)\n- Map 'h' to return to task list (same as escape/q)\n- Add 'l' key binding for potential future navigation within detail view\n\n#### 3. Update Help Text:\n- Modify showHelp() method in KeyHandlers.js to include h/l bindings\n- Update both \"Navigation\" and \"Task Detail View\" sections\n\n#### 4. Testing Strategy:\n- Test 'l' key in task list (should enter task details)\n- Test 'h' key in task detail (should return to task list)  \n- Test 'h' key in task list (should do nothing)\n- Verify existing navigation still works\n- Test in different focus states within task detail view\n\n### Technical Implementation Details:\n- Use same event handling pattern as existing keys\n- Ensure proper context checking (current screen, focus state)\n- Maintain backward compatibility with existing navigation\n- Add visual feedback where appropriate",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 114
        },
        {
          "id": 2,
          "title": "Implement h/l key bindings in KeyHandlers.js",
          "description": "Add vim-style h (left/back) and l (right/forward) key bindings to the global key handlers",
          "details": "Add h/l key bindings to the setup() method in KeyHandlers.js:\n- 'l' key: Navigate forward (same as Enter key behavior)\n- 'h' key: Navigate back (context-sensitive based on current screen)\n- Ensure proper context checking to avoid conflicts\n- Maintain existing functionality",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 114
        },
        {
          "id": 3,
          "title": "Add h/l key bindings to TaskDetailScreen.js",
          "description": "Add vim-style h/l key bindings to all key handler components in TaskDetailScreen for consistent navigation",
          "details": "Add h/l key bindings to all component key handlers in TaskDetailScreen.js:\n- container key handlers\n- subtaskList key handlers  \n- parentTaskBox key handlers\n- subtaskDetailBox key handlers\n\nMap 'h' to return to task list (same as escape/q)\nMap 'l' for potential future navigation within detail view\nEnsure consistency across all focus states",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 114
        },
        {
          "id": 4,
          "title": "Test vim-style navigation implementation",
          "description": "Manually test the implemented vim-style h/l navigation keys to ensure they work correctly in all contexts",
          "details": "Manual testing checklist:\n1. Launch TUI and verify 'l' key navigates from task list to task details\n2. Verify 'h' key navigates from task details back to task list  \n3. Test 'h' key in task list (should do nothing - no error)\n4. Test navigation in different focus states within task detail view\n5. Verify existing navigation methods (Enter, Escape, q) still work\n6. Check that help text shows new key bindings correctly\n7. Test that keys don't interfere with search mode or status modal\n8. Verify vim-style navigation works alongside existing j/k/gg/G keys",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 114
        }
      ]
    }
  ]
}