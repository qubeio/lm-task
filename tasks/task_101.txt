# Task ID: 101
# Title: Reorganize TaskMaster Configuration Structure
# Status: in-progress
# Dependencies: None
# Priority: medium
# Description: Restructure the TaskMaster configuration to place all config-related items in a dedicated 'Taskmaster' folder for better organization and easier gitignore management.
# Details:
Create a dedicated 'Taskmaster' folder in the project root to contain all TaskMaster configuration items including tasks, config files, and local documents. This will reduce clutter in the root directory and make it easier to add these files to .gitignore when needed.

Implementation steps:
1. Create a new 'Taskmaster' folder in the project root
2. Move the 'tasks' directory into the 'Taskmaster' folder
3. Move TaskMaster configuration files (like .taskmasterconfig) into the 'Taskmaster' folder
4. Update any code references to these files to point to the new locations
5. Update documentation to reflect the new structure
6. Modify the TaskMaster code to look for configuration in the new location
7. Keep PRD.md in the root directory for backward compatibility with other agent tools

This reorganization will improve project organization while maintaining compatibility with existing tools.

# Test Strategy:


# Subtasks:
## 1. Create Taskmaster Directory Structure [pending]
### Dependencies: None
### Description: Create the new Taskmaster directory in the project root and plan the file organization structure.
### Details:
Create a new 'Taskmaster' directory in the project root that will house all TaskMaster configuration items. Define the structure of subdirectories needed within this folder (e.g., tasks, config, templates). Document the planned structure and ensure it aligns with the project's organization principles.

## 2. Migrate Tasks Directory [done]
### Dependencies: 101.1
### Description: Move the existing 'tasks' directory into the new Taskmaster folder structure.
### Details:
Carefully migrate the existing 'tasks' directory and its contents into the new Taskmaster folder. This includes:
1. Moving all task files (.md files)
2. Moving the tasks.json file
3. Ensuring file permissions are maintained
4. Verifying all files are correctly transferred
5. Testing that the TaskMaster system can still access and process these files in their new location

## 3. Migrate Configuration Files [pending]
### Dependencies: 101.1
### Description: Move TaskMaster configuration files into the new Taskmaster folder.
### Details:
Identify and move all TaskMaster configuration files (such as .taskmasterconfig and any other configuration files) into the new Taskmaster folder. Create a dedicated 'config' subdirectory if appropriate. Ensure that file permissions are maintained and that all configuration files are properly transferred.

## 4. Update Code References to New Paths [pending]
### Dependencies: 101.2, 101.3
### Description: Update all code references throughout the TaskMaster codebase to point to the new Taskmaster folder structure.
### Details:
Systematically update all code references that currently point to the old file locations to use the new Taskmaster folder structure. This includes:

1. Update path references in the main TaskMaster CLI code
2. Update path references in the MCP server code
3. Update any hardcoded paths in configuration files
4. Update import statements and file path constants
5. Update any scripts that reference the old locations
6. Ensure backward compatibility where possible
7. Test all updated references to ensure they work correctly

Key areas to check:
- scripts/modules/ directory for any hardcoded paths
- mcp-server/src/ directory for path references
- Any configuration loading code
- File discovery and auto-detection logic
- Documentation generation scripts

## 5. Update Initialization and Model Setup Functions [pending]
### Dependencies: 101.1
### Description: Modify the core initialization and model setup functions to create and use the new Taskmaster folder structure instead of root-level files.
### Details:
Update the core system functions to work with the new Taskmaster folder structure:

**Initialization Function Changes:**
1. Modify `initialize_project` to create `Taskmaster/` directory structure:
   - `Taskmaster/tasks/` (instead of root `tasks/`)
   - `Taskmaster/config/` for configuration files
   - `Taskmaster/templates/` for any template files
   - `Taskmaster/reports/` if needed for reports

2. Update the initialization to create `.taskmasterconfig` in `Taskmaster/config/` instead of project root

**Model Setup Function Changes:**
1. Modify the `models` command/tool to look for and modify configuration in `Taskmaster/config/.taskmasterconfig`
2. Update the configuration loading logic to check the new location first, with fallback to old location for backward compatibility
3. Update the `task-master models --setup` command to create/modify the config file in the new location

**Configuration Loading Updates:**
1. Update configuration discovery logic to check `Taskmaster/config/.taskmasterconfig` first
2. Maintain backward compatibility by falling back to root `.taskmasterconfig` if new location doesn't exist
3. Update environment variable handling to work with new structure
4. Update any hardcoded paths in the configuration system

**File Discovery Updates:**
1. Update `tasks.json` discovery to look in `Taskmaster/tasks/` first
2. Update task file generation to use new directory structure
3. Update any auto-detection logic for configuration files

This ensures the system works correctly with the new structure from the moment of initialization.

