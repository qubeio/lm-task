# Task ID: 120
# Title: Remove All AI Functionality
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Remove all remaining AI functionality from LM-Tasker, including PRD parsing, model selection, AI provider integrations, and any AI-related configuration. The goal is to make LM-Tasker a purely manual task management system.
# Details:
This task involves removing all AI-related code and functionality from LM-Tasker to make it a purely manual task management system. The scope includes:

**AI Functionality to Remove:**
1. PRD parsing commands and functionality (parse-prd, migrate-prd)
2. Model selection and configuration (models command, .lmtaskerconfig AI settings)
3. All AI provider integrations (Azure, OpenAI, Anthropic, Google, Mistral, Perplexity, XAI, Ollama)
4. AI services layer (ai-services-unified.js and related modules)
5. AI-related configuration management
6. AI provider-specific code in src/ai-providers/
7. supported-models.json and model management
8. All AI-related environment variables and API key handling
9. AI-related documentation and examples

**Key Areas to Clean Up:**
- Remove parse-prd and migrate-prd commands from CLI and MCP
- Remove models command and model configuration
- Remove AI services layer (ai-services-unified.js)
- Remove AI provider implementations (src/ai-providers/)
- Remove supported-models.json and model management code
- Clean up configuration files (.lmtaskerconfig) to remove AI settings
- Update documentation to reflect manual-only operation
- Remove AI-related dependencies from package.json
- Clean up environment variable handling for API keys
- Remove AI-related tests and fixtures

**Files/Directories to Review:**
- scripts/modules/commands.js (remove parse-prd, migrate-prd, models commands)
- scripts/modules/ai-services-unified.js (entire file)
- scripts/modules/task-manager/parse-prd.js (entire file)
- scripts/modules/task-manager/migrate-prd.js (entire file)
- scripts/modules/task-manager/models.js (entire file)
- scripts/modules/config-manager.js (remove AI configuration)
- scripts/modules/supported-models.json (entire file)
- src/ai-providers/ (entire directory)
- mcp-server/src/tools/parse-prd.js (entire file)
- mcp-server/src/tools/migrate-prd.js (entire file)
- mcp-server/src/tools/models.js (entire file)
- mcp-server/src/core/direct-functions/parse-prd.js (entire file)
- mcp-server/src/core/direct-functions/migrate-prd.js (entire file)
- mcp-server/src/core/direct-functions/models.js (entire file)
- All documentation files referencing AI functionality
- Package.json dependencies related to AI providers
- Test files for AI functionality

**Approach:**
1. Remove AI-related CLI commands (parse-prd, migrate-prd, models)
2. Remove AI-related MCP tools
3. Remove AI service layer and provider implementations
4. Clean up configuration management
5. Update documentation and examples
6. Remove AI-related dependencies
7. Clean up tests and remove AI-related test files
8. Update README and user guides to reflect manual-only operation

# Test Strategy:


# Subtasks:
## 1. Phase 1: Remove CLI Commands for AI Functionality [done]
### Dependencies: None
### Description: Remove parse-prd, migrate-prd, and models commands from the CLI interface in commands.js
### Details:
Remove the following commands from scripts/modules/commands.js:
- parse-prd command and its action handler
- migrate-prd command and its action handler  
- models command and its action handler
- Any helper functions specific to these commands (like runInteractiveSetup)
- Remove related imports that are no longer needed
- Test that CLI still works without these commands

--- Updated 2025-07-17T09:26:32.768Z ---
Implementation Plan for Task 120.1 (Remove CLI Commands for AI Functionality):

1. Remove CLI Command Registrations:
   - In scripts/modules/commands.js, remove the parse-prd, migrate-prd, and models command registrations and their handlers from registerCommands.
2. Remove Related Imports:
   - Remove all imports only used by these commands, including from task-manager.js (parsePRD), task-manager/models.js (getModelConfiguration, getAvailableModelsList, setModel, getApiKeyStatusReport), task-manager/migrate-prd.js (migratePRDFile, analyzePRDFiles, isOldFormatPRD, isInScriptsDirectory), config-manager.js (getAvailableModels, getBaseUrlForRole), ui.js (displayModelConfiguration, displayAvailableModels, displayApiKeyStatus, displayAiUsageSummary), and mcp-server/src/core/utils/path-utils.js (findPRDDocumentPath).
3. Remove Helper Functions:
   - Remove runInteractiveSetup and all its internal helpers (fetchOpenRouterModelsCLI, fetchOllamaModelsCLI, getPromptData, handleSetModel), and any other helpers only used by these commands.
4. Remove Unused Variables and Code:
   - Remove variables/constants/code blocks only used by the removed commands or helpers.
5. Remove CLI Usage in Tests:
   - In scripts/test-claude.js and scripts/test-claude-errors.js, remove or update any test code that invokes the parse-prd CLI command.
6. Test the CLI:
   - Verify the CLI works for all other commands and there are no broken imports or references.
7. Clean Up Documentation:
   - Remove or update CLI help texts, comments, or documentation referencing these commands.

Potential Challenges:
- Some helpers/imports may be used elsewhere; verify before removal.
- Ensure CLI initialization/help output is not broken.

Next: Proceed to code removal and validation.

--- Updated 2025-07-17T09:42:02.280Z ---
Subtask 120.1 implementation is complete. All CLI commands for AI functionality (parse-prd, migrate-prd, models) have been removed from scripts/modules/commands.js, along with their handlers, related imports, and helper functions. CLI usage in test scripts has been updated, and the CLI works for all other commands. The only remaining step is to update the CLI help info page to remove references to these commands. Once the help info is updated, this subtask can be marked as done.

## 2. Phase 2: Remove MCP Tools for AI Functionality [done]
### Dependencies: None
### Description: Remove AI-related MCP tools and direct functions from the MCP server
### Details:
Remove the following MCP components:
- mcp-server/src/tools/parse-prd.js
- mcp-server/src/tools/migrate-prd.js
- mcp-server/src/tools/models.js
- mcp-server/src/core/direct-functions/parse-prd.js
- mcp-server/src/core/direct-functions/migrate-prd.js
- mcp-server/src/core/direct-functions/models.js
- Remove these tool registrations from mcp-server/src/tools/index.js
- Remove these imports from mcp-server/src/core/task-master-core.js
- Test MCP server functionality without AI tools

--- Updated 2025-08-02T04:37:36.705Z ---
Successfully completed Phase 2: Remove MCP Tools for AI Functionality

**Files Removed:**
- mcp-server/src/tools/parse-prd.js
- mcp-server/src/tools/migrate-prd.js  
- mcp-server/src/tools/models.js
- mcp-server/src/core/direct-functions/parse-prd.js
- mcp-server/src/core/direct-functions/migrate-prd.js
- mcp-server/src/core/direct-functions/models.js

**Files Updated:**
- mcp-server/src/tools/index.js: Removed imports and registrations for AI tools
- mcp-server/src/core/task-master-core.js: Removed AI-related imports, Map entries, and exports
- mcp-server/src/index.js: Updated toolNames array to remove AI tools (now shows 18 tools instead of previous count)
- mcp-server/src/core/direct-functions/initialize-project.js: Updated next_step description to remove parse-prd references

**Testing:**
- MCP server starts successfully and registers 18 tools (down from previous count)
- Basic functionality tested with get_tasks tool - works correctly
- No broken imports or references remaining

All AI-related MCP tools and direct functions have been successfully removed from the MCP server. The server continues to function properly with the remaining manual task management tools.

## 3. Phase 3: Remove AI Service Layer and Provider Implementations [done]
### Dependencies: None
### Description: Remove the unified AI service layer and all AI provider implementations
### Details:
Remove the following files and directories:
- scripts/modules/ai-services-unified.js (entire file)
- src/ai-providers/ (entire directory and all provider implementations)
- scripts/modules/task-manager/parse-prd.js
- scripts/modules/task-manager/migrate-prd.js
- scripts/modules/task-manager/models.js
- Remove AI service imports from any remaining files
- Update task-manager index.js to remove AI-related exports

--- Updated 2025-08-02T04:43:10.058Z ---
Successfully completed Phase 3: Remove AI Service Layer and Provider Implementations

**Files Removed:**
- scripts/modules/ai-services-unified.js (entire file)
- scripts/modules/supported-models.json (entire file)
- scripts/modules/task-manager/parse-prd.js (entire file)
- scripts/modules/task-manager/migrate-prd.js (entire file)
- scripts/modules/task-manager/models.js (entire file)
- src/ai-providers/azure.js (entire file)
- src/ai-providers/ (entire directory removed)

**Files Updated:**
- scripts/modules/task-manager.js: Removed AI-related imports and exports (parsePRD)
- scripts/modules/task-manager/update-tasks.js: Removed AI service imports and simplified to manual-only operation
- scripts/modules/task-manager/add-task.js: Completely rewritten to only support manual task creation, removed all AI functionality
- scripts/modules/config-manager.js: Completely rewritten to remove all AI model configuration, simplified to basic project settings only
- scripts/modules/commands.js: Updated error message to remove AI-related references

**Key Changes:**
- All AI service layer functionality removed
- All AI provider implementations removed
- Task creation now only supports manual task data (no AI generation)
- Configuration management simplified to basic project settings only
- Update-tasks functionality disabled (returns message about AI removal)
- Add-task functionality converted to manual-only operation
- All AI-related imports, exports, and dependencies removed

**Testing:**
- Basic functionality verified - manual task creation works
- Configuration loading works with simplified structure
- No broken imports or references remaining

All AI service layer and provider implementations have been successfully removed. The system now operates as a purely manual task management system.

## 4. Phase 4: Remove AI Configuration and Model Management [done]
### Dependencies: None
### Description: Remove AI-related configuration files and settings from the configuration management system
### Details:
Clean up configuration-related files:
- Remove scripts/modules/supported-models.json
- Update scripts/modules/config-manager.js to remove AI model configuration logic
- Update .lmtaskerconfig structure to remove models section
- Remove AI-related functions from config-manager.js (getAvailableModels, setModel, etc.)
- Update configuration validation to not require AI settings
- Remove API key handling for AI providers

--- Updated 2025-08-02T05:03:02.040Z ---
Updated approach: Since AI functionality has been removed, the .lmtaskerconfig file no longer serves a useful purpose. The configuration was primarily for AI model settings, and now that those are gone, we should remove the entire configuration system.

**New Plan:**
1. Remove the .lmtaskerconfig template file from assets/
2. Update scripts/init.js to not copy the .lmtaskerconfig file
3. Update scripts/modules/config-manager.js to be minimal or remove it entirely
4. Update any references to .lmtaskerconfig in documentation and code
5. Remove configuration validation and loading logic since it's no longer needed
6. Update any code that depends on configuration to use sensible defaults

This is a more thorough cleanup that removes the entire configuration system rather than just cleaning it up.

--- Updated 2025-08-02T05:04:20.691Z ---
Successfully completed Phase 4: Remove AI Configuration and Model Management

**Files Removed:**
- assets/.lmtaskerconfig (template file)
- test-config-manager.js (test file)

**Files Updated:**
- scripts/init.js: Removed .lmtaskerconfig copying and AI model configuration step, updated next steps to remove AI references
- scripts/modules/config-manager.js: Completely rewritten to provide hardcoded defaults instead of reading from .lmtaskerconfig files
- scripts/modules/utils.js: Updated findProjectRoot to remove .lmtaskerconfig marker

**Key Changes:**
- Removed entire .lmtaskerconfig configuration system
- Config-manager now provides hardcoded defaults (logLevel: "info", debug: false, defaultSubtasks: 5, defaultPriority: "medium", projectName: "LM-Tasker")
- All configuration functions now return hardcoded values instead of reading from files
- Project initialization no longer creates or configures .lmtaskerconfig files
- Removed AI model configuration step from project initialization
- Updated next steps in initialization to reflect manual-only operation
- All existing code continues to work with the simplified configuration system

**Testing:**
- Unit tests for utils.js pass successfully
- Configuration functions return expected hardcoded values
- No broken imports or references remaining

The configuration system has been completely removed and replaced with simple hardcoded defaults, eliminating the need for .lmtaskerconfig files entirely.

## 5. Phase 5: Clean Up Dependencies and Package Configuration [done]
### Dependencies: None
### Description: Remove AI-related npm dependencies and clean up package.json
### Details:
Review and remove AI-related dependencies:
- Remove Vercel AI SDK and related packages
- Remove AI provider SDK dependencies (anthropic, openai, @google/generative-ai, etc.)
- Remove any other AI-related dependencies that are no longer needed
- Update package.json scripts if any reference AI functionality
- Run npm audit to ensure no broken dependency chains

## 6. Phase 6: Update Documentation and Examples [done]
### Dependencies: None
### Description: Update all documentation to remove AI functionality references and reflect manual-only operation
### Details:
Update documentation files:
- README.md: Remove AI functionality descriptions, model setup instructions
- docs/command-reference.md: Remove parse-prd, migrate-prd, models commands
- docs/configuration.md: Remove AI model configuration sections
- docs/tutorial.md: Update setup instructions to remove AI setup
- CLAUDE.md: Update project overview to reflect manual-only system
- assets/AGENTS.md: Remove AI-related setup and model configuration
- Remove or update example PRD files since they can't be parsed
- Update .cursor/rules/ files to remove AI functionality references
- Update any other documentation mentioning AI features

## 7. Phase 7: Remove AI-Related Tests and Fixtures [done]
### Dependencies: None
### Description: Clean up test files and fixtures that test AI functionality
### Details:
Remove AI-related test files:
- Tests for parse-prd functionality
- Tests for migrate-prd functionality
- Tests for models command and configuration
- Tests for AI service layer and providers
- Remove AI-related test fixtures and sample data
- Update integration tests to not use AI commands
- Update e2e tests to remove AI functionality testing
- Fix any remaining tests that may have dependencies on removed AI code

--- Updated 2025-08-05T17:02:41.582Z ---
Implementation Plan (2025-08-05):

1. Remove the following AI-related test files and scripts:
   - tests/e2e/run_fallback_verification.sh (references models, providers, fallback AI cost)
   - Any test or fixture referencing parse-prd, migrate-prd, models, or AI providers
   - Test fixtures and sample data related to AI (e.g., tests/fixtures/legacy-prd.txt if it contains AI test data)
2. Update integration and e2e tests to remove AI functionality testing.
3. Fix any remaining tests that depend on removed AI code.
4. Run all tests to ensure correctness and stability.
5. Log progress and mark the subtask as done when complete.

This plan will be executed step by step, with each change verified and tested for correctness.

## 8. Phase 8: Final Cleanup and Validation [done]
### Dependencies: None
### Description: Perform final cleanup, validation, and testing to ensure LM-Tasker works as a manual-only system
### Details:
Final validation steps:
- Run all remaining tests to ensure nothing is broken
- Test core manual functionality (list, show, add-task, set-status, etc.)
- Test MCP server with remaining tools
- Verify CLI help and documentation reflects current functionality
- Remove any remaining references to AI functionality in code comments
- Update version and changelog to reflect major change
- Verify installation and setup works without AI dependencies
- Test with a fresh project initialization to ensure clean experience

## 9. Modify Initialize Functionality to Only Create Task JSON [done]
### Dependencies: None
### Description: Update the initialize functionality to only create a basic tasks.json file without any configuration setup, MCP configuration, or AI-related functionality.
### Details:
The current initialize functionality creates:
- Project structure with various directories
- MCP configuration for Cursor integration
- Environment variable setup
- Shell aliases
- Various configuration files

This subtask should simplify it to only:
- Create a basic tasks.json file with empty tasks array
- Optionally create the tasks/ directory if it doesn't exist
- Remove all configuration, MCP setup, and AI-related functionality
- Keep the core task management functionality intact

This aligns with the goal of removing all AI functionality and simplifying the tool to focus purely on task management.

--- Updated 2025-09-30T19:56:46.052Z ---
### Initial Exploration

**Findings:**
- There is no `scripts/init.js` file mentioned in the architecture documentation
- No `initializeProject` direct function exists in `mcp-server/src/core/direct-functions/`
- No init command registered in the CLI commands based on grep searches
- The documentation references `lm-tasker init` command but it's not found in the codebase

**Next steps:**
- Search for any existing initialization code in the codebase
- Determine if this is a new feature to be created or if it exists in a different location
- Check if there's any template or setup functionality that handles project initialization

--- Updated 2025-09-30T19:57:03.735Z ---
### Discovery of Completed Work

**Important Finding:**
Looking at task 121, it appears the init command has **already been completely removed** from the codebase (as stated in task_121.txt line 247: "The init command has been completely removed from the codebase").

Task 121 implemented the following changes:
1. Complete removal of init command from CLI
2. Removed all imports and references to init functionality
3. Cleaned up MCP server to remove initialize-project tool
4. Updated tool registration to reflect new workflow
5. No linting errors introduced

The new workflow uses `add-task` as the single entry point, which automatically handles initialization when tasks.json doesn't exist.

**Need to verify:**
- Whether there are any remaining references to init functionality
- If there's any documentation that still mentions init that needs updating
- Whether task 120.9 is already complete or if there's something additional needed

--- Updated 2025-09-30T19:57:26.130Z ---
### Remaining References Found

After searching the codebase, found the following documentation files that still reference the removed init functionality:

1. **CLAUDE.md** (3 references):
   - Line 36: "Use `initialize_project` to create initial tasks.json"
   - Line 61: "Managed via `lm-tasker init` command"
   - Line 151: "lm-tasker init # Initialize project"

2. **PRD.md** (1 reference):
   - Line 508: "- **Project Setup**: initialize_project, parse_prd"

3. **assets/user_workflow.mdc** (2 references):
   - Line 14: "lm-tasker init"
   - Line 125: "lm-tasker init # Initialize project"

4. **mcp-server/src/index.js** (1 reference):
   - Line 67: "initialize_project" (in a list/comment)

5. **docs/tui-design.md** (2 references - these are example task titles, not commands)

**Plan:**
Need to update these documentation files to reflect the new workflow where `add-task` automatically initializes when tasks.json doesn't exist.

--- Updated 2025-09-30T19:58:32.982Z ---
### Cleanup Complete

Successfully updated all documentation files to remove references to the removed init functionality:

**Files Updated:**
1. ✅ **CLAUDE.md** - Updated 3 references:
   - Changed "Use `initialize_project`" to "Use `add_task` / `lm-tasker add-task`"
   - Changed "Managed via `lm-tasker init` command" to "Created automatically when first task is added"
   - Changed command example to show `add-task` as the initialization method

2. ✅ **PRD.md** - Updated 1 reference:
   - Removed `initialize_project` from Available Tools list

3. ✅ **assets/user_workflow.mdc** - Updated 2 references:
   - Changed "Initialize Your Project" section to "Create Your First Task"
   - Updated command examples to use `add-task` instead of `init`

4. ✅ **mcp-server/src/index.js** - Updated 1 reference:
   - Removed "initialize_project" from toolNames array

**Result:**
All documentation now correctly reflects that:
- `add-task` automatically initializes the project when tasks.json doesn't exist
- No separate init command is needed
- This aligns with the work completed in task 121

--- Updated 2025-09-30T20:00:08.608Z ---
### Final Updates Complete

Successfully updated all remaining references:

**Additional Files Updated:**
5. ✅ **README.md** - Updated 4 references:
   - Changed init commands to add-task commands in multiple places
   - Updated troubleshooting section
   
6. ✅ **docs/command-reference.md** - Updated 3 references:
   - Replaced init examples with add-task examples
   
7. ✅ **docs/tutorial.md** - Updated 2 references:
   - Changed initialization instructions to use add-task
   
8. ✅ **docs/configuration.md** - Updated 2 references:
   - Changed initialization instructions
   - Updated troubleshooting section

9. ✅ **scripts/modules/commands.js** - Updated 4 references:
   - Changed hint messages from "lm-tasker init" to add-task instructions
   - Updated configuration setup messages

10. ✅ **tests/unit/commands.test.js** - Updated 1 reference:
   - Updated test expectations to match new hint messages

**Summary:**
All documentation and code references to the init command have been successfully removed and replaced with instructions for using `add-task` to initialize projects. The remaining references in task files and e2e test scripts are historical/tracking references which are appropriate to keep.

